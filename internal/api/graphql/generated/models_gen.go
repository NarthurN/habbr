// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

type BatchDeleteResult struct {
	Success      bool     `json:"success"`
	DeletedCount int      `json:"deletedCount"`
	DeletedIDs   []string `json:"deletedIDs"`
	Errors       []string `json:"errors"`
}

type Comment struct {
	ID        string             `json:"id"`
	PostID    string             `json:"postID"`
	ParentID  *string            `json:"parentID,omitempty"`
	Content   string             `json:"content"`
	AuthorID  string             `json:"authorID"`
	Depth     int                `json:"depth"`
	CreatedAt time.Time          `json:"createdAt"`
	UpdatedAt time.Time          `json:"updatedAt"`
	Children  *CommentConnection `json:"children"`
}

type CommentConnection struct {
	Edges      []*CommentEdge `json:"edges"`
	PageInfo   *PageInfo      `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

type CommentEdge struct {
	Node   *Comment `json:"node"`
	Cursor string   `json:"cursor"`
}

type CommentEvent struct {
	Type    CommentEventType `json:"type"`
	Comment *Comment         `json:"comment"`
	PostID  string           `json:"postID"`
}

type CommentFilter struct {
	AuthorID *string `json:"authorID,omitempty"`
	Content  *string `json:"content,omitempty"`
	Depth    *int    `json:"depth,omitempty"`
	MaxDepth *int    `json:"maxDepth,omitempty"`
}

type CommentInput struct {
	PostID   string  `json:"postID"`
	ParentID *string `json:"parentID,omitempty"`
	Content  string  `json:"content"`
	AuthorID string  `json:"authorID"`
}

type CommentResult struct {
	Success bool     `json:"success"`
	Comment *Comment `json:"comment,omitempty"`
	Error   *string  `json:"error,omitempty"`
}

type CommentStats struct {
	TotalComments int     `json:"totalComments"`
	MaxDepth      int     `json:"maxDepth"`
	AverageDepth  float64 `json:"averageDepth"`
}

type CommentUpdateInput struct {
	Content *string `json:"content,omitempty"`
}

type DeleteResult struct {
	Success   bool    `json:"success"`
	DeletedID *string `json:"deletedID,omitempty"`
	Error     *string `json:"error,omitempty"`
}

type Mutation struct {
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor,omitempty"`
	EndCursor       *string `json:"endCursor,omitempty"`
}

type Post struct {
	ID              string             `json:"id"`
	Title           string             `json:"title"`
	Content         string             `json:"content"`
	AuthorID        string             `json:"authorID"`
	CommentsEnabled bool               `json:"commentsEnabled"`
	CreatedAt       time.Time          `json:"createdAt"`
	UpdatedAt       time.Time          `json:"updatedAt"`
	Comments        *CommentConnection `json:"comments"`
}

type PostConnection struct {
	Edges      []*PostEdge `json:"edges"`
	PageInfo   *PageInfo   `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

type PostEdge struct {
	Node   *Post  `json:"node"`
	Cursor string `json:"cursor"`
}

type PostFilter struct {
	AuthorID        *string `json:"authorID,omitempty"`
	Title           *string `json:"title,omitempty"`
	Content         *string `json:"content,omitempty"`
	CommentsEnabled *bool   `json:"commentsEnabled,omitempty"`
}

type PostInput struct {
	Title           string `json:"title"`
	Content         string `json:"content"`
	AuthorID        string `json:"authorID"`
	CommentsEnabled bool   `json:"commentsEnabled"`
}

type PostResult struct {
	Success bool    `json:"success"`
	Post    *Post   `json:"post,omitempty"`
	Error   *string `json:"error,omitempty"`
}

type PostStats struct {
	TotalComments   int        `json:"totalComments"`
	CommentsEnabled bool       `json:"commentsEnabled"`
	LastCommentAt   *time.Time `json:"lastCommentAt,omitempty"`
}

type PostUpdateInput struct {
	Title           *string `json:"title,omitempty"`
	Content         *string `json:"content,omitempty"`
	CommentsEnabled *bool   `json:"commentsEnabled,omitempty"`
}

type Query struct {
}

type Subscription struct {
}

type CommentEventType string

const (
	CommentEventTypeCreated CommentEventType = "CREATED"
	CommentEventTypeUpdated CommentEventType = "UPDATED"
	CommentEventTypeDeleted CommentEventType = "DELETED"
)

var AllCommentEventType = []CommentEventType{
	CommentEventTypeCreated,
	CommentEventTypeUpdated,
	CommentEventTypeDeleted,
}

func (e CommentEventType) IsValid() bool {
	switch e {
	case CommentEventTypeCreated, CommentEventTypeUpdated, CommentEventTypeDeleted:
		return true
	}
	return false
}

func (e CommentEventType) String() string {
	return string(e)
}

func (e *CommentEventType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CommentEventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CommentEventType", str)
	}
	return nil
}

func (e CommentEventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *CommentEventType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e CommentEventType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
