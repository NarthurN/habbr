services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: habbr-postgres
    environment:
      POSTGRES_DB: habbr
      POSTGRES_USER: habbr_user
      POSTGRES_PASSWORD: habbr_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
      - habbr-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U habbr_user -d habbr"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for caching and pub/sub (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: habbr-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - habbr-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Habbr GraphQL API Application
  habbr-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: habbr-api
    ports:
      - "8080:8080"
    environment:
      # Database configuration
      DATABASE_TYPE: postgres
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: habbr
      DATABASE_USER: habbr_user
      DATABASE_PASSWORD: habbr_password
      DATABASE_SSL_MODE: disable
      DATABASE_MAX_CONNECTIONS: 25
      DATABASE_MAX_IDLE_CONNECTIONS: 5
      DATABASE_CONNECTION_MAX_LIFETIME: 300s

      # Server configuration
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8080
      SERVER_READ_TIMEOUT: 30s
      SERVER_WRITE_TIMEOUT: 30s
      SERVER_IDLE_TIMEOUT: 120s
      SERVER_SHUTDOWN_TIMEOUT: 30s
      SERVER_ENABLE_PLAYGROUND: "true"
      SERVER_ENABLE_INTROSPECTION: "true"

      # Logger configuration
      LOGGER_LEVEL: info
      LOGGER_FORMAT: json
      LOGGER_ENABLE_CALLER: "false"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - habbr-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Development tools (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: habbr-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@habbr.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - habbr-network
    depends_on:
      - postgres
    profiles:
      - dev
      - tools

  # Redis Insight for Redis management (optional)
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: habbr-redis-insight
    ports:
      - "8001:8001"
    volumes:
      - redis_insight_data:/db
    networks:
      - habbr-network
    depends_on:
      - redis
    profiles:
      - dev
      - tools

networks:
  habbr-network:
    driver: bridge
    name: habbr-network

volumes:
  postgres_data:
    name: habbr-postgres-data
  redis_data:
    name: habbr-redis-data
  pgadmin_data:
    name: habbr-pgadmin-data
  redis_insight_data:
    name: habbr-redis-insight-data
